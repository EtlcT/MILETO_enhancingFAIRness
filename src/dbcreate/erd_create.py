# -*-coding: utf-8 -*-

""" This module create a simple ERD schema relative to the spreadsheet
which data is accessed by retrieve_data.py script
"""

import os

try:
    import eralchemy2
except ImportError:
    print("Failed to import eralchemy2 for ERD generation\n"
          "ERD will be generated by networkx library")
    import networkx as nx
    import matplotlib.pyplot as plt

import pickle

class ERD_maker():
    """
    Class that create ERD schema for database
    """

    def __init__(self, db_path, tables_structure=None) -> None:
        self.tables_structure = tables_structure
        self.db_dir = os.path.split(db_path)[0]
        self.db_name = os.path.basename(db_path)
        self.output_erd = os.path.normpath((self.db_dir + "/ERD_" + self.db_name.replace('sqlite', 'png')))
        pass

    def networkx_draw_ERD(self) -> bytes:
        """
        Create ERD schema with networkx
        """

        output = os.path.normpath(self.output_erd)

        Graph = nx.Graph()

        table_list = set(self.tables_structure['Table'])
        
        for table in table_list:
            attributes = self.tables_structure[self.tables_structure['Table']==table]['Attribute'].tolist()

            attr_str = '\n'.join(attributes)

            Graph.add_node(table, label=f"{table}\n\n{attr_str}", type='entity')
            
        for i, table1 in enumerate(table_list):
            for j, table2 in enumerate(table_list):
                if i<j:
                    shared_attributes = set(
                        self.tables_structure[self.tables_structure['Table']==table1]['Attribute']
                    ).intersection(
                        set(
                            self.tables_structure[self.tables_structure['Table']==table2]['Attribute']
                        )
                    )
                    if shared_attributes:
                        Graph.add_edge(table1, table2, shared_attributes=list(shared_attributes))
        
        pos = nx.spring_layout(Graph, seed=42)

        fig = plt.figure(figsize=(19.2, 10.8), dpi=100)

        nx.draw_networkx_nodes(Graph, pos, nodelist=table_list, node_color='lightblue', node_size=10000, label=None, node_shape="s")

        node_labels = nx.get_node_attributes(Graph, 'label')
        nx.draw_networkx_labels(Graph, pos, labels=node_labels, font_size=10, font_color='black', font_family='sans-serif')

        plt.savefig(output , format='png')

        binaryGraph = pickle.dumps(Graph)
        
        return binaryGraph
    

    def eralchemy_draw_ERD(self):
        """
        Create ERD schema with eralchemy2
        """

        output = os.path.normpath(self.output_erd)

        eralchemy2.render_er(
            f"sqlite:///{os.path.join(self.db_dir, self.db_name)}",
            output
        )

        with open(output, "rb") as f:
            binaryGraph = f.read()
        
        return binaryGraph