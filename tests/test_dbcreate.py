import unittest
import os
import time
import shutil
from unittest.mock import MagicMock

import pandas as pd
import numpy as np
from src.utils import utils
from src.extraction.retrieve_data import GetSpreadsheetData
from src.dbcreate.dbcreate import sqliteCreate
from conf.config import *

def rs_mock() -> pd.DataFrame:
    
    clients = pd.DataFrame(
        columns= ['client_name', 'client_address', "city_id"],
        data= [
            ["John Doe", 'address 1', 1],
            ["Jane Doe", 'address 2', 2],
            ["John Smith", 'address 3', 1]
        ]
    )

    orders = pd.DataFrame(
        columns= ['order_id', 'client_name', 'client_address', 'products', 'purchase_date'],
        data= [
            [1, "Jane doe", "address 2", ["product_1", "product_2", "product_3"], "27.01.2024"],
            [2, "Jane doe", "address 2", ["product_2", "product_2"], "14.03.2024"],
            [3, "John doe", "address 1", ["product_2", "product_3"], "09.06.2024"]
        ]
    )

    cities = pd.DataFrame(
        columns= ["city_id", "city_name", "total_clients"],
        data= [
            [1, "San Francisco", 2],
            [2, "Los Angeles", 1]
        ]
    )

    products = pd.DataFrame(
        columns= ['product_id', 'product_name', 'price', 'photo'],
        data= [
            ['product_1', 'suitcase_a', 98.50, "../data/images/suitcase.jpg"],
            ['product_2', 'phone_case', 7.99, "../data/images/phonecase.jpg"],
            ['product_3', 'nail_file', 15.50, "../data/images/nail file.jpg"]
        ]
    )

    fields_info = list(INFO_ATT.values())
    values_info = [
        ['clients', 'client_name', "TEXT", "", 'Y', "", ""],
        ['clients', 'client_address', "TEXT", "", 'Y', "", ""],
        ['clients', 'city_id', "INTEGER", "", "", 'Y', "cities"],
        ['orders', 'order_id', "INTEGER", "", 'Y', "", ""],
        ['orders', 'client_name', "TEXT", "", "", 'Y', "clients"],
        ['orders', 'client_address', "TEXT", "", "", 'Y', "clients"],
        ['orders', 'products', "TEXT", "", "", "", ""],
        ['orders', 'purchase_date', "TEXT", "", "", "", ""],
        ['cities', 'city_id', "INTEGER", "", 'Y', "", ""],
        ['cities', 'city_name', "TEXT", "", "", "", ""],
        ['cities', 'total_clients', "INTEGER", "", "", "", ""],
        ['products', 'product_id', "INTEGER", "", 'Y', "", ""],
        ['products', 'product_name', "TEXT", "", "", "", ""],
        ['products', 'price', "FLOAT", "", "", "", ""],
        ['products', 'photo', "TEXT", "", "", "", ""]
    ]
    tables_info = pd.DataFrame(data=values_info, columns=fields_info)

    meta_terms_info = [
            ['publicationYear', 2024],
            ['Title', 'Example dataset for NFS-FAIR-DDP']
        ]
    table_ref = pd.DataFrame(
        columns=list(METAREF_ATT.values()),
        data=meta_terms_info
    )
    
    fields_ddict_tables = ["table", "caption"]
    values_ddict_tables = [
        ["clients", "list of clients and information"],
        ["orders", "purchase orders"],
        ["products", "product in sales with price and photos"],
        ["cities", "list of cities and number of clients"]
    ]

    ddict_tables = pd.DataFrame(
        columns=fields_ddict_tables,
        data= values_ddict_tables
    )

    fields_ddict_attr = DDICT_A_ATT
    values_ddict_attr = [
        ["client_name", "", "client fullname"],
        ["client_address", "", "clientaddress"],
        ["order_id", "", "identifier for orders"],
        ["products", "", "list of products ordered"],
        ["purchase_date", "", "date of the purchase"],
        ["city_id", "", "identifier for city"],
        ["city_name", "", "name of the city"],
        ["total_clients", "", "total number of client that lives in this city"],
        ["product_id", "", "identifier for the product"],
        ["product_name", "", "name of the product"],
        ["price", "euro", "price of the product in euros"],
        ["photo", "", "photo of the product"]
    ]
    ddict_attr = pd.DataFrame(
        columns=fields_ddict_attr,
        data= values_ddict_attr
    )

    meta_extra = pd.DataFrame(
        columns= ["property", "value"],
        data= [
            ["synthesis", "db_orders is a database created for testing purpose of the Ss2db software developped in the context of Mileto project."],
            ["description", "db_orders contains details about products selled, clients and their orders as well as data about cities. Products table contain path to images generated by AI (https://deepai.org/machine-learning-model/text2img) to test the capabilities of Ss2db software to access images and convert them into blob for storing them into sqlite database."]
        ]
    )

    return {
        'clients': clients,
        'orders': orders,
        'cities': cities,
        'products': products,
        INFO: tables_info,
        METAREF: table_ref,
        DDICT_T: ddict_tables,
        DDICT_A: ddict_attr,
        METAEXTRA: meta_extra
    }

class TestDBCreate(unittest.TestCase):

    def test_create_db(self):
        """Check that a sqlite file with database name is created
        in the output directory
        """
        checked_data = MagicMock(return_value=rs_mock())
        data = GetSpreadsheetData('fakepath/to/spreadsheet/db_orders.xlsx', checked_data)
        output_path = os.path.abspath(os.path.normpath("tests/tests_outputs/"))
        db_name = f"{data.db_name}.sqlite"
        db_file_path = os.path.join(output_path, db_name)

        sqlite_db = sqliteCreate(getData=data, output_dir=output_path)

        sqlite_db.create_db()

        self.assertTrue(os.path.exists(db_file_path))

        shutil.rmtree(output_path)

    def test_insert_data_and_meta_tables_create(self):
        """Check that insert_data and meta_tables_create 
        modify the sqlite file
        """

        data = GetSpreadsheetData('fakepath/to/spreadsheet/db_orders.xlsx', rs_mock())

        output_path = os.path.abspath(os.path.normpath("tests/tests_outputs/"))
        db_name = f"{data.db_name}.sqlite"
        db_file_path = os.path.join(output_path, db_name)

        sqlite_db = sqliteCreate(getData=data, output_dir=output_path)

        sqlite_db.create_db()

        initial_modification_time = os.path.getmtime(db_file_path)

        # the modification is done too fast so we simulate more time
        time.sleep(0.2)
        sqlite_db.insert_data()

        first_modification_time = os.path.getmtime(db_file_path)

        self.assertGreater(first_modification_time, initial_modification_time)

        time.sleep(0.2)
        sqlite_db.meta_tables_create()

        second_modification_time = os.path.getmtime(db_file_path)

        self.assertGreater(second_modification_time, first_modification_time)

        shutil.rmtree(output_path)

    def test_ddict_schema_create(self):
        """Check that ddict_schema_create modify the sqlite
        and create a ERD_dbname.png is created in output dir
        """
        checked_data = MagicMock(return_value=rs_mock())
        data = GetSpreadsheetData('fakepath/to/spreadsheet/db_orders_test_erd.xlsx', checked_data)
        output_path = os.path.abspath(os.path.normpath("tests/tests_outputs/"))
        db_name = f"{data.db_name}.sqlite"
        db_file_path = os.path.join(output_path, db_name)

        if os.path.exists(db_file_path):
            shutil.rmtree(db_file_path)

        sqlite_db = sqliteCreate(getData=data, output_dir=output_path)

        sqlite_db.create_db()
        sqlite_db.insert_data()

        # for file modification tracking
        initial_modification_time = os.path.getmtime(db_file_path)

        erd_name = f"ERD_{data.db_name}.png"
        erd_file_path = os.path.join(output_path, erd_name)

        time.sleep(0.2)
        sqlite_db.ddict_schema_create()

        first_modification_time = os.path.getmtime(db_file_path)

        # check sqlite is modified
        self.assertGreater(first_modification_time, initial_modification_time)

        # check ERD image is created
        self.assertTrue(os.path.exists(erd_file_path))

        shutil.rmtree(output_path)
